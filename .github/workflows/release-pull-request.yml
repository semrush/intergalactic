name: release-pull-request
on:
  schedule:
    - cron: '0 8 * * *'
  repository_dispatch:
    types: [update-command]
  workflow_dispatch:
jobs:
  check_new_commits:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
  create-release-pull-request:
    needs:
      - check_new_commits
    if: ${{ needs.check_date.outputs.should_run != 'false' && needs.check_date.outputs.pr_commented != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
      - name: generate release pull request name
        run: |
          currentSemcoreUiVersion="$(cat semcore/ui/package.json | jq -r .version)"
          echo "release_pr_name=release-after-$currentSemcoreUiVersion" >> $GITHUB_ENV
          echo "release_branch_name=release/after-$currentSemcoreUiVersion" >> $GITHUB_ENV
      - name: Github GPG Auth
        uses: crazy-max/ghaction-import-gpg@v4.4.0
        with:
          gpg_private_key: ${{ secrets.BOT_ACCOUNT_GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_committer_name: semrush-ci-whale
          git_committer_email: semrush-ci-whale@users.noreply.github.com
      - name: Github CLI auth
        run: |
          echo "${{ secrets.BOT_ACCOUNT_GITHUB_TOKEN }}" > ./.gh-auth-token.txt
          gh auth login --with-token < ./.gh-auth-token.txt
          rm ./.gh-auth-token.txt
      - name: check release branch already exists
        run: |
          existed_in_remote=$(git ls-remote --heads origin "${{ env.release_branch_name }}")
          if [[ -z ${existed_in_remote} ]]; then
            echo "release_branch_already_exists=false" >> $GITHUB_ENV
          else
            echo "release_branch_already_exists=true" >> $GITHUB_ENV
          fi
      - name: create release branch
        run: |
          git checkout -b "${{ env.release_branch_name }}"
        if: env.release_branch_already_exists != 'true'
      - name: checkout release branch
        run: |
          git checkout master
          git pull
          git fetch --all
          git checkout "${{ env.release_branch_name }}"
          git pull origin master --rebase
          git push -f
          git pull
          echo "firstCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | tail -1)" >> $GITHUB_ENV
          echo "secondCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | tail -2 | head -1)" >> $GITHUB_ENV
          echo "lastCommitHash=$(git log origin/master..origin/${{ env.release_branch_name }} --pretty=format:"%H" | head -1)" >> $GITHUB_ENV
          echo "temporaryBranch=tmp-$(openssl rand -hex 20)" >> $GITHUB_ENV
        if: env.release_branch_already_exists == 'true'
      - name: commit changelog change as a first commit in the release branch
        run: |
          pnpm update-release-changelog
          git add semcore/ui/CHANGELOG.md
          git add semcore/ui/package.json
          git commit -S -m "[chore] Automatically updated @semcore/ui changelog"
        if: env.release_branch_already_exists != 'true'
      - name: edit changelog change commit in the release branch
        run: |
          git checkout "${{ env.firstCommitHash }}"
          git checkout HEAD^1
          git checkout -b "${{ env.temporaryBranch }}"
          pnpm update-release-changelog
          git add semcore/ui/CHANGELOG.md
          git add semcore/ui/package.json
          git commit -S -m "[chore] Automatically updated @semcore/ui changelog"
          [[ "${{ env.firstCommitHash }}" = "${{ env.lastCommitHash }}" ]] || git cherry-pick "${{ env.secondCommitHash }}^..${{ env.lastCommitHash }}" --strategy-option theirs --allow-empty
          git branch -m "${{ env.release_branch_name }}" "${{ env.temporaryBranch }}-to-be-deleted"
          git branch -D "${{ env.temporaryBranch }}-to-be-deleted"
          git branch -m "${{ env.temporaryBranch }}" "${{ env.release_branch_name }}"
        if: env.release_branch_already_exists == 'true'
      - name: push updated changelog
        run: |
          git push --set-upstream origin "${{ env.release_branch_name }}" --force
      - name: create pull request
        run: |
          gh pr create --title "${{ env.release_pr_name }}" --body "This is automatically created pull request for the next \`@semcore/ui\` package release.<br />Bot pulls changes from \`master\` branch and regenerates \`./semcore/ui/CHANGELOG.md\` file every morning and when \`/update\` command dispatched in pull request comment.<br />To edit changelog or release version in your own way, checkout branch, commit changes and push it to pull request.<br />When release is ready, dispatch it with \`/release\` comment." --draft --base master
        if: env.release_branch_already_exists != 'true'
